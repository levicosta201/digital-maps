<?php
namespace Tests\Unit\src\Infrastructure\Http\Controllers;

use App\src\Application\Actions\CreatePointAction;
use App\src\Application\Actions\DeletePointAction;
use App\src\Application\Actions\ListNearPointsAction;
use App\src\Application\Actions\ListPointsAction;
use App\src\Application\Actions\UpdatePointAction;
use App\src\Application\DTO\PointDto;
use App\src\Infrastructure\Http\Controllers\PointController;
use App\src\Infrastructure\Http\Requests\PointRequest;
use Illuminate\Http\JsonResponse;
use Mockery;
use Tests\TestCase;

class PointControllerTest extends TestCase
{
    protected PointRequest $pointRequest;
    protected CreatePointAction $createPointAction;
    protected ListPointsAction $listPointsAction;
    protected UpdatePointAction $updatePointAction;
    protected DeletePointAction $deletePointAction;
    protected ListNearPointsAction $listNearPointsAction;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->pointRequest = Mockery::mock(PointRequest::class);
        $this->pointRequest
            ->shouldReceive('validated')
            ->andReturn([
                'name' => 'Point 1',
                'latitude' => 15,
                'longitude' => 21,
                'open_hour' => '08:00',
                'close_hour' => '18:00'
            ]);

        $this->createPointAction = Mockery::mock(CreatePointAction::class);
        $this->createPointAction
            ->shouldReceive('execute')
            ->andReturn(new PointDto(
                'uuid',
                'Point 1',
                15,
                21,
                '08:00',
                '18:00'
            ));

        $this->listPointsAction = Mockery::mock(ListPointsAction::class);
        $this->listPointsAction
            ->shouldReceive('execute')
            ->andReturn([
                new PointDto(
                    'uuid',
                    'Point 1',
                    15,
                    21,
                    '08:00',
                    '18:00'
                ),
                new PointDto(
                    'uuid',
                    'Point 2',
                    150,
                    210,
                    '09:00',
                    '17:00'
                )
            ]);

        $this->deletePointAction = Mockery::mock(DeletePointAction::class);
        $this->deletePointAction
            ->shouldReceive('execute')
            ->andReturn(true);

        $this->updatePointAction = Mockery::mock(UpdatePointAction::class);
        $this->updatePointAction
            ->shouldReceive('execute')
            ->andReturn(new PointDto(
                'uuid',
                'Point 1',
                15,
                21,
                '08:00',
                '18:00'
            ));

        $this->listNearPointsAction = Mockery::mock(ListNearPointsAction::class);
        $this->listNearPointsAction
            ->shouldReceive('execute')
            ->andReturn([
                new PointDto(
                    'uuid',
                    'Point 1',
                    15,
                    21,
                    '08:00',
                    '18:00'
                ),
                new PointDto(
                    'uuid',
                    'Point 2',
                    150,
                    210,
                    '09:00',
                    '17:00'
                )
            ]);
    }

    public function testStoreSuccess()
    {
        $pointController = new PointController();
        $point = $pointController->store(
            $this->pointRequest,
            $this->createPointAction
        );

        $this->assertInstanceOf(JsonResponse::class, $point);
    }

    public function testListPointsSuccess()
    {
        $pointController = new PointController();
        $point = $pointController->list(
            $this->listPointsAction
        );

        $this->assertInstanceOf(JsonResponse::class, $point);
    }

    public function testUpdatePointSuccess()
    {
        $pointController = new PointController();
        $point = $pointController->update(
            'uuid',
            $this->pointRequest,
            $this->updatePointAction
        );

        $this->assertInstanceOf(JsonResponse::class, $point);
    }

    public function testDeletePointSuccess()
    {
        $pointController = new PointController();
        $point = $pointController->delete(
            'uuid',
            $this->deletePointAction
        );

        $this->assertInstanceOf(JsonResponse::class, $point);
    }

    public function testNearbyPointsSuccess()
    {
        $pointController = new PointController();
        $point = $pointController->near(
            15,
            21,
            100,
            '08:25',
            $this->listNearPointsAction
        );

        $this->assertInstanceOf(JsonResponse::class, $point);
    }
}
