<?php
declare(strict_types=1);

namespace Tests\Unit\src\Infrastructure\Persistence\Eloquent;

use App\Models\PointModel;
use App\src\Application\DTO\PointDto;
use App\src\Domain\Entities\Point;
use App\src\Infrastructure\Persistence\Eloquent\PointRepositoryEoloquent;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery;
use Tests\TestCase;

class PointRepositoryEoloquentTest extends TestCase
{
    use RefreshDatabase;

    protected PointModel $pointModel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->pointModel = Mockery::mock(PointModel::class);
        $this->pointModel
            ->shouldReceive('create')
            ->andReturn(PointDto::fromArray([
                'uuid' => 'mock-mock-mock-mock',
                'name' => 'test',
                'latitude' => 15,
                'longitude' => 30,
                'open_hour' => '08:17',
                'close_hour' => '18:21',
            ]));
    }

    public function testCreateSuccess()
    {
        $mockPointDto = PointDto::fromArray([
            'uuid' => 'mock-mock-mock-mock',
            'name' => 'test',
            'latitude' => 15,
            'longitude' => 30,
            'open_hour' => '08:17',
            'close_hour' => '18:21',
        ]);

        $pointRepository = new PointRepositoryEoloquent();
        $point = $pointRepository->create($mockPointDto);

        $this->assertInstanceOf(PointDto::class, $point);
    }

    public function testAllSuccess()
    {
        $pointRepository = new PointRepositoryEoloquent();
        $points = $pointRepository->all();

        $this->assertIsArray($points);
    }

    public function testUpdateSuccess()
    {
        $mockPointDto = PointDto::fromArray([
            'uuid' => 'mock-mock-mock-mock',
            'name' => 'test',
            'latitude' => 15,
            'longitude' => 30,
            'open_hour' => '08:17',
            'close_hour' => '18:21',
        ]);

        $pointRepository = new PointRepositoryEoloquent();
        $point = $pointRepository->update($mockPointDto);

        $this->assertIsInt($point);
    }

    public function testDeleteSuccess()
    {
        $pointRepository = new PointRepositoryEoloquent();
        $point = $pointRepository->delete('mock-mock-mock-mock');

        $this->assertIsInt($point);
    }

    public function testGetNearSuccess()
    {
        $mockPointDto = [
            PointDto::fromArray([
                'uuid' => 'mock-mock-mock-mock',
                'name' => 'test',
                'latitude' => 15,
                'longitude' => 30,
                'open_hour' => '08:17',
                'close_hour' => '18:21',
            ]),
            PointDto::fromArray([
                'uuid' => 'mock-mock-mock-mock-2',
                'name' => 'test 2',
                'latitude' => 15,
                'longitude' => 30,
                'open_hour' => '08:17',
                'close_hour' => '18:21',
            ])
        ];

        $pointRepository = new PointRepositoryEoloquent();
        $point = $pointRepository->getNear(
            15,
            30,
            10,
            '08:17'
        );

        $this->assertIsArray($point);
    }
}
