<?php
namespace Tests\Unit\src\Application\Actions;

use App\src\Application\Actions\UpdatePointAction;
use App\src\Application\DTO\PointDto;
use App\src\Domain\Services\PointsService;
use Tests\TestCase;

class UpdatePointActionTest extends TestCase
{
    protected PointsService $pointsService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->pointsService = $this->createMock(PointsService::class);
        $this->pointsService
            ->method('update')
            ->willReturn(PointDto::fromArray([
                'uuid' => 'mock-mock-mock-mock',
                'name' => 'mock-name',
                'latitude' => 17,
                'longitude' => 25,
                'open_hour' => '08:35',
                'close_hour' => '17:50',
            ]));
    }

    /**
     * @throws \Exception
     */
    public function testExecuteUpdateSuccess()
    {
        $listPointsAction = new UpdatePointAction($this->pointsService);
        $result = $listPointsAction->execute(PointDto::fromArray([
            'uuid' => 'mock-mock-mock-mock',
            'name' => 'mock-name',
            'latitude' => 17,
            'longitude' => 25,
            'open_hour' => '08:35',
            'close_hour' => '17:50',
        ]));

        $this->assertInstanceOf(PointDto::class, $result);
        $this->assertEquals('mock-mock-mock-mock', $result->uuid);
    }

    /**
     * @throws \Exception
     */
    public function testExecuteUpdateException()
    {
        $listPointsAction = new UpdatePointAction($this->pointsService);
        $this->expectException(\TypeError::class);
        $result = $listPointsAction->execute(PointDto::fromArray([
            'uuid' => 'mock-mock-mock-mock',
            'name' => 'mock-name',
            'latitude' => "teststee",
            'longitude' => 25,
            'open_hour' => '08:35',
            'close_hour' => '17:50',
        ]));
    }
}
